#ifndef __BINARY_H__
#define __BINARY_H__

#define TRUE    1
#define FALSE   0

#define MAX(a, b) ((a)>(b)?(a):(b))
#define MIN(a, b) ((a)>(b)?(b):(a))

// 1. 求二叉树的最大深度
// 2. 求二叉树的最小深度
// 3. 求二叉树中节点的个数
// 4. 求二叉树中叶子节点的个数
// 5. 求二叉树中第k层节点的个数
// 6. 判断二叉树是否是平衡二叉树
// 7. 判断二叉树是否是完全二叉树
// 8. 两个二叉树是否完全相同
// 9. 两个二叉树是否互为镜像
// 10.翻转二叉树or镜像二叉树
// 11.求两个二叉树的最低公共祖先节点
// 12.二叉树的前序遍历
// 13.二叉树的中序遍历
// 14.二叉树的后序遍历
// 15.前序遍历和后序遍历构造二叉树
// 16.在二叉树中插入节点
// 17.打印出二叉树中节点值的和等于给定整数所有的路径
// 18.二叉树的搜索区间
// 19.二叉树的层次遍历
// 20.二叉树内两个节点的最长距离
// 21.不同的二叉树
// 22.判断二叉树是否是合法的二叉查找树(BST)

typedef struct BiNode {
    int data;
    struct BiNode *left;
    struct BiNode *right;
} BiNode, *BiTree;

#endif
